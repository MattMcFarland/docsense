{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "ConfigParseOptions": {
      "properties": {
        "allowImportExportEverywhere": {
          "description":
            "By default, import and export declarations can only appear at a program's top level. Setting this option to true allows them anywhere where a statement is allowed.",
          "type": "boolean"
        },
        "allowReturnOutsideFunction": {
          "description":
            "By default, a return statement at the top level raises an error. Set this to true to accept such code.",
          "type": "boolean"
        },
        "plugins": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ranges": {
          "additionalItems": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ]
          },
          "description":
            "Adds a ranges property to each node: [node.start, node.end]",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "minItems": 2,
          "type": "array"
        },
        "sourceFilename": {
          "description":
            "Correlate output AST nodes with their source filename.\nUseful when generating code and source maps from the ASTs of multiple input files.",
          "type": "string"
        },
        "sourceType": {
          "description":
            "Indicate the mode the code should be parsed in. Can be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\". \"unambiguous\" will make Babylon attempt to guess, based on the presence of ES6 import or export statements. Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".",
          "enum": ["module", "script", "unambiguous"],
          "type": "string"
        },
        "startLine": {
          "description":
            "By default, the first line of code parsed is treated as line 1. You can provide a line number to alternatively start with. Useful for integration with other source tools.",
          "type": "number"
        },
        "tokens": {
          "description":
            "Adds all parsed tokens to a tokens property on the File node",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "files": {
      "description":
        "Array of files or glob patterns of which you want to parse for documentation",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "main": {
      "description":
        "What markdown file to load for the main page. (e.g., './README')",
      "type": "string"
    },
    "manual": {
      "description": "Path to manual documentation",
      "type": "string"
    },
    "out": {
      "description": "Path of which the documentation will be generated.",
      "type": "string"
    },
    "parseOptions": {
      "$ref": "#/definitions/ConfigParseOptions",
      "description": "Options passed to the parser"
    },
    "parser": {
      "description": "Parser, currently 'babylon' is only supported",
      "enum": ["babylon"],
      "type": "string"
    },
    "root": {
      "description": "The root path of the project",
      "type": "string"
    },
    "static": {
      "description": "Path to static files",
      "type": "string"
    }
  },
  "type": "object"
}
