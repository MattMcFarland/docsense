// @flow

/**
 * Flowtype definitions for flowdb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Lowdb$PromiseLike<T> {
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns  A Promise for the completion of which ever callback is executed.
   */
  then<TResult>(
    onfulfilled?: (value: T) => TResult | Lowdb$PromiseLike<TResult>,
    onrejected?: (reason: any) => TResult | Lowdb$PromiseLike<TResult>
  ): Lowdb$PromiseLike<TResult>;
  then<TResult>(
    onfulfilled?: (value: T) => TResult | Lowdb$PromiseLike<TResult>,
    onrejected?: (reason: any) => void
  ): Lowdb$PromiseLike<TResult>;
}

declare interface Lowdb$StringRepresentable {
  toString(): string;
}

declare interface Lowdb$List<T> {
  [index: number]: T;
  length: number;
}

declare interface Lowdb$Dictionary<T> {
  [index: string]: T;
}

declare interface Lowdb$DictionaryIterator<T, TResult> {
  (value: T, key?: string, collection?: Lowdb$Dictionary<T>): TResult;
}

declare interface Lowdb$ListIterator<T, TResult> {
  (value: T, index: number, collection: Lowdb$List<T>): TResult;
}

declare interface Lowdb$StringIterator<TResult> {
  (char: string, index?: number, string?: string): TResult;
}

declare interface Lowdb$MixinOptions {
  chain?: boolean;
}

declare class LoDashWrapper<LowEntryClass> {
  /**
   *
   * @see  _.has
   */
  has(
    path: Lowdb$StringRepresentable | Lowdb$StringRepresentable[]
  ): LowEntryClass;

  /**
   *
   * @see  _.hasIn
   */
  hasIn(
    path: Lowdb$StringRepresentable | Lowdb$StringRepresentable[]
  ): LowEntryClass;

  /**
   *
   * @see  _.assign
   */
  assign<TSource, TResult>(source: TSource): LowEntryClass;

  /**
   *
   * @see  _.assign
   */
  assign<TSource1, TSource2, TResult>(
    source1: TSource1,
    source2: TSource2
  ): LowEntryClass;

  /**
   *
   * @see  _.assign
   */
  assign<TSource1, TSource2, TSource3, TResult>(
    source1: TSource1,
    source2: TSource2,
    source3: TSource3
  ): LowEntryClass;

  /**
   *
   * @see  _.assign
   */
  assign<TSource1, TSource2, TSource3, TSource4, TResult>(
    source1: TSource1,
    source2: TSource2,
    source3: TSource3,
    source4: TSource4
  ): LowEntryClass;

  /**
   *
   * @see  _.assign
   */
  assign(): LowEntryClass;

  /**
   *
   * @see  _.assign
   */
  assign<TResult>(...otherArgs: any[]): LowEntryClass;

  /**
   *
   * @see  _.cloneDeep
   */
  cloneDeep<T>(): LowEntryClass;

  /**
   *
   * @see  _.cloneDeep
   */
  cloneDeep<T>(): LowEntryClass;

  /**
   *
   * @see  _.cloneDeep
   */
  cloneDeepWith<T>(customizer: (value: any) => any): LowEntryClass[];

  /**
   *
   * @see  _.cloneDeep
   */
  cloneDeepWith<T>(customizer: (value: any) => any): LowEntryClass;

  /**
   *
   * @see  _.defaults
   */
  defaults<S1, TResult>(source1: S1, ...sources: {}[]): LowEntryClass;

  /**
   *
   * @see  _.defaults
   */
  defaults<S1, S2, TResult>(
    source1: S1,
    source2: S2,
    ...sources: {}[]
  ): LowEntryClass;

  /**
   *
   * @see  _.defaults
   */
  defaults<S1, S2, S3, TResult>(
    source1: S1,
    source2: S2,
    source3: S3,
    ...sources: {}[]
  ): LowEntryClass;

  /**
   *
   * @see  _.defaults
   */
  defaults<S1, S2, S3, S4, TResult>(
    source1: S1,
    source2: S2,
    source3: S3,
    source4: S4,
    ...sources: {}[]
  ): LowEntryClass;

  /**
   *
   * @see  _.defaults
   */
  defaults(): LowEntryClass;

  /**
   *
   * @see  _.defaults
   */
  defaults<TResult>(...sources: {}[]): LowEntryClass;

  /**
   *
   * @see  _.get
   */
  get<TResult>(
    object: any,
    path: string | number | boolean | Array<string | number | boolean>,
    defaultValue?: TResult
  ): LowEntryClass;

  /**
   *
   * @see  _.get
   */
  get<TResult>(
    path: string | number | boolean | Array<string | number | boolean>,
    defaultValue?: TResult
  ): LowEntryClass;

  /**
   *
   * @see  _.mixin
   */
  mixin<TResult>(
    source: Lowdb$Dictionary<() => void>,
    options?: Lowdb$MixinOptions
  ): LowEntryClass;

  /**
   *
   * @see  _.mixin
   */
  mixin<TResult>(options?: Lowdb$MixinOptions): LowEntryClass;

  /**
   *
   * @see  _.set
   */
  set<TResult>(
    path: Lowdb$StringRepresentable | Lowdb$StringRepresentable[],
    value: any
  ): LowEntryClass;

  /**
   *
   * @see  _.set
   */
  set<V, TResult>(
    path: Lowdb$StringRepresentable | Lowdb$StringRepresentable[],
    value: V
  ): LowEntryClass;

  /**
   *
   * @see  _.find
   */
  find<T>(
    predicate?: Lowdb$ListIterator<T, boolean>,
    thisArg?: any
  ): LowEntryClass;

  /**
   *
   * @see  _.find
   */
  find(predicate?: string, thisArg?: any): LowEntryClass;

  /**
   *
   * @see  _.find
   */
  find<TObject>(predicate?: TObject): LowEntryClass;

  /**
   *
   * @see  _.find
   */
  filter<TObject>(predicate?: TObject): LowEntryClass;

  /**
   *
   * @see  _.filter
   */
  filter<T>(
    predicate?: Lowdb$ListIterator<T, boolean>,
    thisArg?: any
  ): LowEntryClass;

  /**
   *
   * @see  _.filter
   */
  filter(predicate: string, thisArg?: any): LowEntryClass;

  /**
   *
   * @see  _.filter
   */
  filter<T>(
    predicate:
      | Lowdb$ListIterator<T, boolean>
      | Lowdb$DictionaryIterator<T, boolean>,
    thisArg?: any
  ): LowEntryClass;

  /**
   *
   * @see  _.filter
   */
  filter(
    predicate?: Lowdb$StringIterator<boolean>,
    thisArg?: any
  ): LowEntryClass;

  /**
   *
   * @see  _.filter
   */
  filter<W>(predicate: W): LowEntryClass;

  /**
   *
   * @see  _.map
   */
  map<T, TResult>(
    iteratee?: Lowdb$ListIterator<T, TResult>,
    thisArg?: any
  ): LowEntryClass;

  /**
   *
   * @see  _.map
   */
  map<TResult>(iteratee?: string): LowEntryClass;

  /**
   *
   * @see  _.map
   */
  map<TObject>(iteratee?: TObject): LowEntryClass;

  /**
   *
   * @see  _.map
   */
  map<TValue, TResult>(
    iteratee?:
      | Lowdb$ListIterator<TValue, TResult>
      | Lowdb$DictionaryIterator<TValue, TResult>,
    thisArg?: any
  ): LowEntryClass;

  /**
   *
   * @see  _.range
   */
  range(end?: number, step?: number): LowEntryClass;

  /**
   *
   * @see  _.rangeRight
   */
  rangeRight(end?: number, step?: number): LowEntryClass;

  /**
   *
   * @see  _.remove
   */
  remove<T>(
    predicate?: Lowdb$ListIterator<T, boolean>,
    thisArg?: any
  ): LowEntryClass;

  /**
   *
   * @see  _.remove
   */
  remove(predicate?: string, thisArg?: any): LowEntryClass;

  /**
   *
   * @see  _.remove
   */
  remove<W>(predicate?: W): LowEntryClass;

  /**
   *
   * @see  _.sortBy
   */
  sortBy<T, TSort>(iteratee?: Lowdb$ListIterator<T, TSort>): LowEntryClass;

  /**
   *
   * @see  _.sortBy
   */
  sortBy(iteratee: string): LowEntryClass;

  /**
   *
   * @see  _.sortBy
   */
  sortBy<W>(whereValue: W): LowEntryClass;

  /**
   *
   * @see  _.sortBy
   */
  sortBy(): LowEntryClass;

  /**
   *
   * @see  _.sortBy
   */
  sortBy<T>(
    ...iteratees: (Lowdb$ListIterator<T, boolean> | any | string)[]
  ): LowEntryClass;

  /**
   *
   * @see  _.sortBy
   */
  sortBy<T>(
    iteratees: (Lowdb$ListIterator<T, any> | string | any)[]
  ): LowEntryClass;

  /**
   *
   * @see  _.slice
   */
  slice(start?: number, end?: number): LowEntryClass;

  /**
   *
   * @see  _.size
   */
  size(): LowEntryClass;

  /**
   *
   * @see  _.take
   */
  take(n?: number): LowEntryClass;

  /**
   *
   * @see  _.times
   */
  times<TResult>(iteratee: (num: number) => TResult): LowEntryClass;

  /**
   *
   * @see  _.times
   */
  times(): LowEntryClass;

  /**
   *
   * @see  _.uniqueId
   */
  uniqueId(): LowEntryClass;
  value<T>(): T;
  pop<T>(): T;
  push<T>(...items: T[]): LowEntryClass;
  shift<T>(): T;
  sort<T>(compareFn?: (a: T, b: T) => number): LowEntryClass;
  splice<T>(start: number): LowEntryClass;
  splice<T>(start: number, deleteCount: number, ...items: any[]): LowEntryClass;
  unshift<T>(...items: T[]): LowEntryClass;
}

export interface Lowdb$Storage {
  /**
   * Reads the database.
   * @param source The source location.
   * @param deserialize The deserialize function to apply.
   * @return  Returns a promise with the deserialized db object.
   */
  read(source: string, deserialize: any): Lowdb$PromiseLike<any>;

  /**
   * Reads the database.
   * @param source The source location.
   * @param deserialize The deserialize function to apply.
   * @return  Returns the deserialized db object.
   */
  read(source: string, deserialize: any): {};

  /**
   * Writes to the database.
   * @param destination The destination location.
   * @param obj The object to write.
   * @param serialize The serialize function to apply.
   */
  write(destination: string, obj: any, serialize: any): void;

  /**
   * Writes to the database.
   * @param destination The destination location.
   * @param obj The object to write.
   * @param serialize The serialize function to apply.
   */
  write(destination: string, obj: any, serialize: any): Lowdb$PromiseLike<void>;
}

export interface Lowdb$Format {
  /**
   * Writes to the database.
   * @param obj The object to serialize.
   * @return  Returns the serialized object string.
   */
  serialize(obj: any): string;

  /**
   * Writes to the database.
   * @param data The object to deserialize.
   * @return  Returns the deserialized object.
   */
  deserialize(data: string): any;
}

export interface Lowdb$Options {
  /**
   * The custom "storage" object.
   */
  storage?: Lowdb$Storage;

  /**
   * The custom "format" object.
   */
  format?: Lowdb$Format;

  /**
   * The flag to automatically persist changes.
   */
  writeOnChange?: boolean;
}

declare export class Lowdb {
  constructor(filePath: string, options?: Lowdb$Options): this;

  /**
   * Access current database state.
   * Returns Returns the database state.
   */
  getState(): any;

  /**
   * Drop or reset database state.
   * @param newState New state of the database
   */
  setState(newState: any): void;

  /**
   * Persist database.
   * @param source The source location.
   */
  write(source?: string): void;

  /**
   * Persist database.
   * @param source The source location.
   */
  write(source?: string): Lowdb$PromiseLike<any>;

  /**
   * Read database.
   * @param source The source location.
   */
  read(source?: string): any;

  /**
   * Read database.
   * @param source The source location.
   */
  read(source?: string): Lowdb$PromiseLike<any>;
}

declare module 'lowdb' {
  declare export default typeof Lowdb$Lowdb
}
