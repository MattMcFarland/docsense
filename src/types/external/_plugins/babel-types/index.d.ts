// Type definitions for babel-types
// Project: babel-types
// Definitions by: Matt McFarland

import {
  Node,
  Comment,
  CommentBlock,
  CommentLine,
  SourceLocation,
  ArrayExpression,
  AssignmentExpression,
  BinaryExpression,
  Directive,
  DirectiveLiteral,
  BlockStatement,
  BreakStatement,
  CallExpression,
  CatchClause,
  ConditionalExpression,
  ContinueStatement,
  DebuggerStatement,
  DoWhileStatement,
  EmptyStatement,
  ExpressionStatement,
  File,
  ForInStatement,
  ForStatement,
  FunctionDeclaration,
  FunctionExpression,
  Identifier,
  IfStatement,
  LabeledStatement,
  StringLiteral,
  NumericLiteral,
  NullLiteral,
  BooleanLiteral,
  RegExpLiteral,
  LogicalExpression,
  MemberExpression,
  NewExpression,
  Program,
  ObjectExpression,
  ObjectMethod,
  ObjectProperty,
  RestElement,
  ReturnStatement,
  SequenceExpression,
  SwitchCase,
  SwitchStatement,
  ThisExpression,
  ThrowStatement,
  TryStatement,
  UnaryExpression,
  UpdateExpression,
  VariableDeclaration,
  VariableDeclarator,
  WhileStatement,
  WithStatement,
  AssignmentPattern,
  ArrayPattern,
  ArrowFunctionExpression,
  ClassBody,
  ClassDeclaration,
  ClassExpression,
  ExportAllDeclaration,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  ExportSpecifier,
  ForOfStatement,
  ImportDeclaration,
  ImportDefaultSpecifier,
  ImportNamespaceSpecifier,
  ImportSpecifier,
  MetaProperty,
  ClassMethod,
  AssignmentProperty,
  ObjectPattern,
  SpreadElement,
  Super,
  TaggedTemplateExpression,
  TemplateElement,
  TemplateLiteral,
  YieldExpression,
  AnyTypeAnnotation,
  ArrayTypeAnnotation,
  BooleanTypeAnnotation,
  BooleanLiteralTypeAnnotation,
  NullLiteralTypeAnnotation,
  ClassImplements,
  ClassProperty,
  DeclareClass,
  DeclareFunction,
  DeclareInterface,
  DeclareModule,
  DeclareTypeAlias,
  DeclareVariable,
  ExistentialTypeParam,
  FunctionTypeAnnotation,
  FunctionTypeParam,
  GenericTypeAnnotation,
  InterfaceExtends,
  InterfaceDeclaration,
  IntersectionTypeAnnotation,
  MixedTypeAnnotation,
  NullableTypeAnnotation,
  NumericLiteralTypeAnnotation,
  NumberTypeAnnotation,
  StringLiteralTypeAnnotation,
  StringTypeAnnotation,
  ThisTypeAnnotation,
  TupleTypeAnnotation,
  TypeofTypeAnnotation,
  TypeAlias,
  TypeAnnotation,
  TypeCastExpression,
  TypeParameterDeclaration,
  TypeParameterInstantiation,
  ObjectTypeAnnotation,
  ObjectTypeCallProperty,
  ObjectTypeIndexer,
  ObjectTypeProperty,
  QualifiedTypeIdentifier,
  UnionTypeAnnotation,
  VoidTypeAnnotation,
  JSXAttribute,
  JSXClosingElement,
  JSXElement,
  JSXEmptyExpression,
  JSXExpressionContainer,
  JSXIdentifier,
  JSXMemberExpression,
  JSXNamespacedName,
  JSXOpeningElement,
  JSXSpreadAttribute,
  JSXText,
  Noop,
  ParenthesizedExpression,
  AwaitExpression,
  BindExpression,
  Decorator,
  DoExpression,
  ExportDefaultSpecifier,
  ExportNamespaceSpecifier,
  RestProperty,
  SpreadProperty,
} from 'babel-types';

import { Annotation } from 'doctrine';

declare module 'babel-types' {
  export interface Node {
    loc: SourceLocation | null;
    __doc_tags__?: Annotation[];
  }

  export interface Comment {
    type: 'CommentBlock' | 'CommentLine';
    value: string;
    start: number;
    end: number;
    loc: SourceLocation;
  }
  export interface SourceLocation {
    filename: string;
  }
  export enum NodeTypes {
    'CommentBlock',
    'CommentLine',
    'ArrayExpression',
    'AssignmentExpression',
    'BinaryExpression',
    'Directive',
    'DirectiveLiteral',
    'BlockStatement',
    'BreakStatement',
    'CallExpression',
    'CatchClause',
    'ConditionalExpression',
    'ContinueStatement',
    'DebuggerStatement',
    'DoWhileStatement',
    'EmptyStatement',
    'ExpressionStatement',
    'File',
    'ForInStatement',
    'ForStatement',
    'FunctionDeclaration',
    'FunctionExpression',
    'Identifier',
    'IfStatement',
    'LabeledStatement',
    'StringLiteral',
    'NumericLiteral',
    'NullLiteral',
    'BooleanLiteral',
    'RegExpLiteral',
    'LogicalExpression',
    'MemberExpression',
    'NewExpression',
    'Program',
    'ObjectExpression',
    'ObjectMethod',
    'ObjectProperty',
    'RestElement',
    'ReturnStatement',
    'SequenceExpression',
    'SwitchCase',
    'SwitchStatement',
    'ThisExpression',
    'ThrowStatement',
    'TryStatement',
    'UnaryExpression',
    'UpdateExpression',
    'VariableDeclaration',
    'VariableDeclarator',
    'WhileStatement',
    'WithStatement',
    'AssignmentPattern',
    'ArrayPattern',
    'ArrowFunctionExpression',
    'ClassBody',
    'ClassDeclaration',
    'ClassExpression',
    'ExportAllDeclaration',
    'ExportDefaultDeclaration',
    'ExportNamedDeclaration',
    'ExportSpecifier',
    'ForOfStatement',
    'ImportDeclaration',
    'ImportDefaultSpecifier',
    'ImportNamespaceSpecifier',
    'ImportSpecifier',
    'MetaProperty',
    'ClassMethod',
    'AssignmentProperty',
    'ObjectPattern',
    'SpreadElement',
    'Super',
    'TaggedTemplateExpression',
    'TemplateElement',
    'TemplateLiteral',
    'YieldExpression',
    'AnyTypeAnnotation',
    'ArrayTypeAnnotation',
    'BooleanTypeAnnotation',
    'BooleanLiteralTypeAnnotation',
    'NullLiteralTypeAnnotation',
    'ClassImplements',
    'ClassProperty',
    'DeclareClass',
    'DeclareFunction',
    'DeclareInterface',
    'DeclareModule',
    'DeclareTypeAlias',
    'DeclareVariable',
    'ExistentialTypeParam',
    'FunctionTypeAnnotation',
    'FunctionTypeParam',
    'GenericTypeAnnotation',
    'InterfaceExtends',
    'InterfaceDeclaration',
    'IntersectionTypeAnnotation',
    'MixedTypeAnnotation',
    'NullableTypeAnnotation',
    'NumericLiteralTypeAnnotation',
    'NumberTypeAnnotation',
    'StringLiteralTypeAnnotation',
    'StringTypeAnnotation',
    'ThisTypeAnnotation',
    'TupleTypeAnnotation',
    'TypeofTypeAnnotation',
    'TypeAlias',
    'TypeAnnotation',
    'TypeCastExpression',
    'TypeParameterDeclaration',
    'TypeParameterInstantiation',
    'ObjectTypeAnnotation',
    'ObjectTypeCallProperty',
    'ObjectTypeIndexer',
    'ObjectTypeProperty',
    'QualifiedTypeIdentifier',
    'UnionTypeAnnotation',
    'VoidTypeAnnotation',
    'JSXAttribute',
    'JSXClosingElement',
    'JSXElement',
    'JSXEmptyExpression',
    'JSXExpressionContainer',
    'JSXIdentifier',
    'JSXMemberExpression',
    'JSXNamespacedName',
    'JSXOpeningElement',
    'JSXSpreadAttribute',
    'JSXText',
    'Noop',
    'ParenthesizedExpression',
    'AwaitExpression',
    'BindExpression',
    'Decorator',
    'DoExpression',
    'ExportDefaultSpecifier',
    'ExportNamespaceSpecifier',
    'RestProperty',
    'SpreadProperty',
  }
  export type FunctionType =
    | FunctionDeclaration
    | FunctionExpression
    | ArrowFunctionExpression;
}
